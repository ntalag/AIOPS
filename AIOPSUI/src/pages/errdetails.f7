<template>
<div class="page" data-name="form">
  <div class="navbar">
    <div class="navbar-bg"></div>
    <div class="navbar-inner sliding">
      <div class="left">
        <a href="#" class="link back">
          <i class="icon icon-back"></i>
          <span class="if-not-md">Back</span>
        </a>
      </div>
      <div class="title">RCA Triage and Remidiation </div>
    </div>
    
  </div>
  <div class="toolbar toolbar-bottom messagebar" @messagebar:attachmentdelete=${deleteAttachment}>
    <div class="toolbar-inner">
      <!--a class="link icon-only" @click=${sheetToggle}>
        <i class="icon f7-icons if-not-md">camera_fill</i>
        <i class="icon material-icons md-only">camera_alt</i>
      </a-->
      <div class="messagebar-area">
        <textarea class="resizable" placeholder="Message">How do  fix ${errdata.error_Message}?</textarea>
      </div>
      <a class="link icon-only demo-send-message-link" @click=${sendMessage}>
        <i class="icon f7-icons if-not-md">arrow_up_circle_fill</i>
        <i class="icon material-icons md-only">send</i>
      </a>
    </div>
    <div class="messagebar-sheet">
      ${images.map((image) => $h`
      <label class="checkbox messagebar-sheet-image" @change=${handleAttachment}>
        <input type="checkbox" />
        <i class="icon icon-checkbox"></i>
        <img src=${image} />
      </label>
      `)}
    </div>
  </div>
  <div class="toolbar toolbar-top tabbar">
    <div class="toolbar-inner">
      <a href="#tab-1" class="tab-link tab-link-active" @click=${() => msgbar(0)}>Issue Details</a>
      <a href="#tab-2" class="tab-link" @click=${() =>  msgbar(1)}>Chat with AI Assistant</a>
      <a href="#tab-3" class="tab-link" @click=${() => msgbar(0)}>Generate Playbook</a>
      
    </div>
  </div>
  
  <div class="tabs">
    <div id="tab-1" class="page-content tab tab-active">
      <div class="list list-strong inset list-dividers-ios links-list">
 
        <table border="1" align="center">
        
          <tbody>
          
               <tr>
                <td class="label-cell">Date</td>
                <td class="numeric-cell">${errdata.created_at}</td>
              </tr>
      
              <tr>
                <td class="label-cell">Server Name</td>
                <td class="numeric-cell">${errdata.server_Name}</td>
              </tr>
              <tr>
                <td class="label-cell">Error Message</td>
                <td class="numeric-cell">${errdata.error_Message}</td>
              </tr>
            
          
      
            
           
          </tbody>
        </table>
      </div>
    </div>

    <div id="tab-2" class="page-content tab">
    
      <div class="page-content messages-content">
        <div class="messages">
          <!-- <div class="messages-title"><b>Sunday, Feb 9,</b> 12:58</div>
          <div class="message message-sent">
            <div class="message-content">
              <div class="message-bubble">
                <div class="message-text">Hi, Kate</div>
              </div>
            </div>
          </div>
          <div class="message message-sent">
            <div class="message-content">
              <div class="message-bubble">
                <div class="message-text">How are you?</div>
              </div>
            </div>
          </div>
          <div class="message message-received">
            <div class="message-avatar"
              style="background-image:url(https://cdn.framework7.io/placeholder/people-100x100-9.jpg)"></div>
            <div class="message-content">
              <div class="message-name">Kate</div>
              <div class="message-bubble">
                <div class="message-text">Hi, I am good!</div>
              </div>
            </div>
          </div>
          <div class="message message-received">
            <div class="message-avatar"
              style="background-image:url(https://cdn.framework7.io/placeholder/people-100x100-7.jpg)"></div>
            <div class="message-content">
              <div class="message-name">Blue Ninja</div>
              <div class="message-bubble">
                <div class="message-text">Hi there, I am also fine, thanks! And how are you?</div>
              </div>
            </div>
          </div>
          <div class="message message-sent">
            <div class="message-content">
              <div class="message-bubble">
                <div class="message-text">Hey, Blue Ninja! Glad to see you ;)</div>
              </div>
            </div>
          </div>
          <div class="message message-sent">
            <div class="message-content">
              <div class="message-bubble">
                <div class="message-text">Hey, look, cutest kitten ever!</div>
              </div>
            </div>
          </div>
          <div class="message message-sent">
            <div class="message-content">
              <div class="message-bubble">
                <div class="message-image">
                  <img src="https://cdn.framework7.io/placeholder/cats-200x260-4.jpg"
                    style="width:200px; height: 260px" />
                </div>
              </div>
            </div>
          </div>
          <div class="message message-received">
            <div class="message-avatar"
              style="background-image:url(https://cdn.framework7.io/placeholder/people-100x100-9.jpg)"></div>
            <div class="message-content">
              <div class="message-name">Kate</div>
              <div class="message-bubble">
                <div class="message-text">Nice!</div>
              </div>
            </div>
          </div>
          <div class="message message-received">
            <div class="message-avatar"
              style="background-image:url(https://cdn.framework7.io/placeholder/people-100x100-9.jpg)"></div>
            <div class="message-content">
              <div class="message-name">Kate</div>
              <div class="message-bubble">
                <div class="message-text">Like it very much!</div>
              </div>
            </div>
          </div>
          <div class="message message-received">
            <div class="message-avatar"
              style="background-image:url(https://cdn.framework7.io/placeholder/people-100x100-7.jpg)"></div>
            <div class="message-content">
              <div class="message-name">Blue Ninja</div>
              <div class="message-bubble">
                <div class="message-text">Awesome!</div>
              </div>
            </div>
          </div> -->
        </div>
      </div>
    </div>
    <div id="tab-3" class="page-content tab ">

    
    <div class="block-title">Prompt Playbook specifications</div>
    <div class="list list-strong-ios list-dividers-ios list-outline-ios">

      <ul>

        <li class="align-top">
          <div class="item-content item-input">
            <div class="item-inner">
              <!-- <div class="item-title item-label"></div>
              <div class="item-input-wrap">
                
                <textarea class="aiprompt-editor" id="aiprompt-editor" placeholder=""></textarea> 
              </div> -->
              <div class="text-editor text-editor-resizable" id="aiprompt-editor" data-placeholder="Enter text..."
              data-mode="popover" >
                <div class="text-editor-content" contenteditable>${errdata.error_Message} please create an ansible playbook check status and start the services to fix this issue. please provide yaml output only</div>
              </div>
            </div>
          </div>
        </li>
      
      </ul>
    </div>
    <div class="block-title">Create Playbook</div>
    <div class="block block-strong-ios block-outline-ios grid grid-cols-2 grid-gap">
     
      <a  href="" class="button button-fill" @click=${() => sendtoai()} >Generate</a>
   
    </div>
   
    <div class="block-title">Genrated AI Playbooks  </div>
    <div class="list list-strong inset list-dividers-ios links-list">
    
      <table border="1" align="center">
        <thead>
          <tr>
            <th class="label-cell">Prompt Date</th>
            <!-- <th class="numeric-cell">Prompt</th> -->
            <!-- <th class="numeric-cell">Resolution</th> -->
            <th class="numeric-cell">Details</th>
            <th class="numeric-cell">Action</th>
            <th class="numeric-cell">Run Status</th>
      
          </tr>
        </thead>
        <tbody>
      
        
        

          ${rcasdata.map((rca) => $h`

            <tr>
              <td class="label-cell">${rca.created_at}</td>
              <!-- <td class="numeric-cell"><a  href="" @click=${() => openprompt(rca)} >...</a></td> -->
              <!-- <td class="numeric-cell"><a  href="" @click=${() => openanalysis(rca)} >Analysis</a></td> -->
              <td class="numeric-cell"><a  href="" @click=${() => openyaml(rca)} >Ansible Playbook</a></td>
              <td class="numeric-cell"><a  href="" @click=${() => approve(rca)}>Approve</a></td>
              <td class="numeric-cell"><a  href="" @click=${() => openpbstat(rca)}>View</a></td>
            
            </tr>

          `)}

          
        
        </tbody>
      </table>
    </div>
     <!-- Prompt Details-->
     <div class="popup prompt-popup" data-close-on-escape="true" data-swipe-to-close="to-bottom"> 
      <div class="page">
        <div class="navbar">
          <div class="navbar-bg"></div>
          <div class="navbar-inner">
            <div class="title">AI Prompt</div>
            <div class="right"><a class="link popup-close">Close</a></div>
          </div>
        </div>
        <div class="page-content">
          <div class="block">
               test content
          </div>
        </div>
      </div>
    </div>
    <!-- AI Response Details-->
    <div class="popup airesponse-popup" data-close-on-escape="true" data-swipe-to-close="to-bottom"> 
      <div class="page">
        <div class="navbar">
          <div class="navbar-bg"></div>
          <div class="navbar-inner">
            <div class="title">AI Response</div>
            <div class="right"><a class="link popup-close">Close</a></div>
          </div>
        </div>
        <div class="page-content">
          <div class="block">
               test content
          </div>
        </div>
      </div>
    </div>
     <!-- Playbook Details-->
    <div class="popup playbook-popup" data-close-on-escape="true" data-swipe-to-close="to-bottom"> 
      <div class="page">
        <div class="navbar">
          <div class="navbar-bg"></div>
          <div class="navbar-inner">
            <div class="title">AI Prompt</div>
            <div class="right"><a class="link popup-close">Close</a></div>
          </div>
        </div>
        <div class="page-content">
          <textarea cols="100" rows="20" style="overflow-y:scroll;">
            test content
          </textarea>
        </div>
      </div>
    </div>
    <div class="popup promptresponse-popup" data-close-on-escape="true" data-swipe-to-close="to-bottom"> 
      <div class="page">
        <div class="navbar">
          <div class="navbar-bg"></div>
          <div class="navbar-inner">
            <div class="title">Generated Playbook(View/Edit)</div>
            <div class="right"><a class="link popup-close">Close</a></div>
          </div>
        </div>
        <div class="page-content">
          <textarea cols="100" rows="20" style="overflow-y:scroll;">
               test content
          </textarea>
          <div class="block">
             <a  href="" class="button button-fill" @click=${() => saveresponses()} >Save</a>
        </div>
        </div>
      </div>
    </div>

    <div class="popup playbookstat-popup" data-close-on-escape="true" data-swipe-to-close="to-bottom"> 
      <div class="page">
        <div class="navbar">
          <div class="navbar-bg"></div>
          <div class="navbar-inner">
            <div class="title">Playbook Status</div>
            <div class="right"><a class="link popup-close">Close</a></div>
          </div>
        </div>
        <div class="page-content">
          
          <table border="1" align="center">
            <thead>
              <tr>
                <th class="label-cell">Execution Date</th>
                <th class="numeric-cell">Server</th>
                <th class="numeric-cell">Status</th>
               
           
              </tr>
            </thead>
            <tbody>
           
            
             
        
               ${pbstatdata.map((pbstat) => $h`
        
                 <tr>
                  <td class="label-cell">${pbstat.created_at}</td>
                  <td class="label-cell">${pbstat.server_Name}</td>
                  <td class="label-cell">${pbstat.execution_Status}</td>
                
                </tr>
        
               `)}
        
              
             
            </tbody>
          </table>
         
        </div>
      </div>
    </div>
 
    </div>
  </div>
  <!-- <div class="page-content">



  </div> -->
</div>
</template>
<script>
var tapp;
export default (props,  { $f7,  $on, $, $el , $onMounted, $onBeforeUnmount, $update}) => {
 var app;
 var page;
 var $$ ;
 let aiprompteditor;
 let propmptpopup;
 let airesponsepopup;
 let promptrespopup;
 let playbookpopup;
 let pbstatpopup;
 let errdata={
     server_Name: '',
     error_Message: '',
     created_at: '',
     id: ''
 };
 let rcasdata=[{
     errorid: '',
     prompt: '',
     ai_response: '',
     ansible_playbook: '',
     created_at: '',
     id: ''
 }];
 let pbstatdata=[{
     created_at: '',
     server_Name: '',
     excecution_status: ''
     
 }];
 let airesponsedata=[];
 let airesyamldata=[];
 let airesponsetext="";
 let airesyamltext="";
 let servername;
 let created_at;
 let errid;
 let errmessage;
 // Component Methods
 const openprompt = (rca) => {
      var content=propmptpopup.el.children[0].children[1].children[0];
      // console.log(propmptpopup.el.children[0].children[1].children[0].innerHTML);
      content.innerHTML=rca.prompt
      propmptpopup.open();
      // $f7.dialog.alert(JSON.stringify( rca.prompt));
      
    }

 const openpbstat = (rca) => {
    console.log(rca)
   // var content=pbstatpopup.el.children[0].children[1].children[0];
    // console.log(propmptpopup.el.children[0].children[1].children[0].innerHTML);
   // content.innerHTML=rca.prompt
   setTimeout(function () {
   app.preloader.show();
   fetch( app.store.state.baseurl + "/pstats/search/"+rca.id, {
        method: 'GET',
        headers: {
          'type': 'application/json',
           'accept': 'application/json',
          'Content-Type': 'application/json',
           'origin': ''
        },
      })
       .then(res => res.json())
       .then((data) => {
          //console.log(data);
          pbstatdata=data;
          $update();
          pbstatpopup.open();
          app.preloader.hide();
          //e.$setState({ errdata: errdata });
          
         
       })
    }, 1000);





  
    // $f7.dialog.alert(JSON.stringify( rca.prompt));
    
 }

    

 const openanalysis = (rca) => {
      // console.log(rca);
      var content=airesponsepopup.el.children[0].children[1].children[0];
      // console.log(propmptpopup.el.children[0].children[1].children[0].innerHTML);
      content.innerHTML=rca.ai_response
      airesponsepopup.open();
      // $f7.dialog.alert(JSON.stringify( rca.ai_response));
      
    }
 const openyaml = (rca) => {
      // console.log(rca);
      
      var content=playbookpopup.el.children[0].children[1].children[0];
      // console.log(propmptpopup.el.children[0].children[1].children[0].innerHTML);
      content.innerHTML=rca.ansible_playbook
      playbookpopup.open();
      // $f7.dialog.alert(JSON.stringify( rca.ansible_playbook));
      
    }
 const saveresponses = () => {
    //  console.log("Error id: " + errdata.id + "\n" +
    //              "prompt: " + aiprompteditor.value + "\n" +
    //              "airesponse: " + airesponsetext + "\n" +
    //              "ansibleplaybook: " + airesyamltext + "\n" 


    //  );
    var today = new Date();
var dd = String(today.getDate()).padStart(2, '0');
var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
var yyyy = today.getFullYear();

today =  yyyy + '-' + mm +  '-' + dd ;
     var errrcajson={
          errorid: errdata.id,
          prompt: aiprompteditor.value,
          ai_response: airesponsetext,
          ansible_playbook: airesyamltext,
          created_at: today
     };
    console.log(JSON.stringify(errrcajson));

 //save to database 
 setTimeout(function () {
   app.preloader.show();
   fetch( app.store.state.baseurl + "/rcas", {
        method: 'POST',
        headers: {
           'type': 'application/json',
           'accept': 'application/json',
          'Content-Type': 'application/json',
           'origin': ''
        },
        body: JSON.stringify(errrcajson)
      })
       .then(res => {
          if (res.ok) {
            return res.json();
          }
          throw new Error(res.status);
         // app.preloader.hide();
        })
       .then((data) => {
          console.log(data);
          // airesponsedata=data;

          // var content=promptrespopup.el.children[0].children[1].children[0];
          // // console.log(propmptpopup.el.children[0].children[1].children[0].innerHTML);
          // content.innerHTML=airesponsedata.candidates[0].content.parts[0].text.replace("\\n", "</br>&nbsp;");
          // console.log(content.innerHTML);
          // airesponsetext=content.innerHTML;
          // promptrespopup.open()
          // app.preloader.hide();

          //e.$setState({ errdata: errdata });
        //  console.log(errdata.error_Message)
        //getaiyaml();
        getrcalist();
       })
       .catch((error) => {
          console.log(error)
          if (error=='Error: 500') {
              //alert('Record has been saved to database')
              app.dialog.alert("Status: 1 </br>" + 
                           "Message: Record has been saved to database" 
              );
              getrcalist();
          } else {
            alert(error)
          }
          app.preloader.hide();
        });
    }, 1000);






 };
 const sendtoai = () => {
  airesponsetext="";
      // console.log(aiprompteditor.value)

      var prompt = aiprompteditor.value;
     
    //call ai proxy 
  setTimeout(function () {
   app.preloader.show();
   fetch( app.store.state.aiproxybaseurl + "/api/generate/", {
        method: 'POST',
        headers: {
           'type': 'application/json',
           'accept': 'application/json',
          'Content-Type': 'application/json',
           'origin': ''
        },
        body: JSON.stringify({text: prompt})
      })
       .then(res => res.json())
       .then((data) => {
          console.log(data);
          if (typeof data.status !== 'undefined') {
              // the variable is defined
              console.log(data)
              app.dialog.alert(JSON.stringify(data.error))
              app.preloader.hide();
          } else {
            airesponsedata=data;
            var content=promptrespopup.el.children[0].children[1].children[0];
            // console.log(propmptpopup.el.children[0].children[1].children[0].innerHTML);
            content.innerHTML=airesponsedata.candidates[0].content.parts[0].text.replace("\\n", "</br>&nbsp;");
            console.log(content.innerHTML);
            airesponsetext=""  ;//ontent.innerHTML;
            airesyamltext=content.innerHTML; //save ansible as well
            promptrespopup.open()
            app.preloader.hide();
          }
          //e.$setState({ errdata: errdata });
        //  console.log(errdata.error_Message)
       // getaiyaml();
       })
    }, 1000);
    
    }

 const approve = (rca) => {
    //console.log(rca.id);
    var rcaid=rca.id;
    // var content=playbookpopup.el.children[0].children[1].children[0];
    // // console.log(propmptpopup.el.children[0].children[1].children[0].innerHTML);
    // content.innerHTML=rca.ansible_playbook
    // playbookpopup.open();
    // $f7.dialog.alert(JSON.stringify( rca.ansible_playbook));
    setTimeout(function () {
   app.preloader.show();
   fetch( app.store.state.aiproxybaseurl + "/api/approve/", {
        method: 'POST',
        headers: {
           'type': 'application/json',
           'accept': 'application/json',
          'Content-Type': 'application/json',
           'origin': ''
        },
        body: JSON.stringify({rcaid: rcaid})
      })
       .then(res => res.json())
       .then((data) => {
          //console.log(data);
          //{sendstatus: '1', sendmessage: 'ansible script sent to ansible server for record : [503]'}
          app.dialog.alert("Status: " + data.sendstatus + "</br>" + 
                           "Message: " + data.sendmessage
          );
          app.preloader.hide();
          //e.$setState({ errdata: errdata });
        //  console.log(errdata.error_Message)
       // getaiyaml();
       })
    }, 1000);
    
 }
 

 const getaiyaml = () => {

      //call ai playbook proxy   
      airesyamltext=""; 
  setTimeout(function () {
   app.preloader.show(); 
   var yamlprompt = " please create an ansible playbook to fix this issue. please provide yaml only";
   prompt = errdata.error_Message + yamlprompt;
   fetch( app.store.state.aiproxybaseurl + "/api/generate/", {
        method: 'POST',
        headers: {
           'type': 'application/json',
           'accept': 'application/json',
          'Content-Type': 'application/json',
           'origin': ''
        },
        body: JSON.stringify({text: prompt})
      })
       .then(res => res.json())
       .then((data) => {
          console.log(data);
          airesyamldata=data;

          var content=promptrespopup.el.children[0].children[1].children[0];
          // console.log(propmptpopup.el.children[0].children[1].children[0].innerHTML);
          content.innerHTML=content.innerHTML + "</br></br></br>Ansible Playbook</br></br>"+ airesyamldata.candidates[0].content.parts[0].text.replace("\\n", "</br>&nbsp;");
         //console.log(content.innerHTML);
         airesyamltext=content.innerHTML;
         promptrespopup.open()
          app.preloader.hide();
          //e.$setState({ errdata: errdata });
          
          //var content=propmptpopup.el.children[0].children[1].children[0];
  
     
         //  promptrespopup.open();
       })
    }, 1000);
    
    }
      
 const getrcalist = () => {
  setTimeout(function () {
   app.preloader.show();
   fetch( app.store.state.baseurl + "/rcas/search/"+props.errId, {
        method: 'GET',
        headers: {
           'type': 'application/json',
           'accept': 'application/json',
           'origin': ''
        },
      })
       .then(res => res.json())
       .then((data) => {
         // console.log(data);
          rcasdata=data;
         
          $update();
          app.preloader.hide();
          //e.$setState({ errdata: errdata });
          
         
       })
    }, 1000);

 }  
    
  //Chat Variables 
  const msgbar = (show) => {
        var display=true;
        if (show==1){
          display=false
        }
        messagebar.el.hidden=display;
  }
  
  const images = [
      'https://cdn.framework7.io/placeholder/cats-300x300-1.jpg',
      'https://cdn.framework7.io/placeholder/cats-200x300-2.jpg',
      'https://cdn.framework7.io/placeholder/cats-400x300-3.jpg',
      'https://cdn.framework7.io/placeholder/cats-300x150-4.jpg',
      'https://cdn.framework7.io/placeholder/cats-150x300-5.jpg',
      'https://cdn.framework7.io/placeholder/cats-300x300-6.jpg',
      'https://cdn.framework7.io/placeholder/cats-300x300-7.jpg',
      'https://cdn.framework7.io/placeholder/cats-200x300-8.jpg',
      'https://cdn.framework7.io/placeholder/cats-400x300-9.jpg',
      'https://cdn.framework7.io/placeholder/cats-300x150-10.jpg'
    ];
    const people = [
      {
        name: 'AIOPS Assistant',
        avatar: 'https://cdn.framework7.io/placeholder/people-100x100-9.jpg'
      },
      {
        name: 'Blue Ninja',
        avatar: 'https://cdn.framework7.io/placeholder/people-100x100-7.jpg'
      },
    ];
    const answers = [
      'Yes!',
      'No',
      'Hm...',
      'I am not sure',
      'And what about you?',
      'May be ;)',
      'Lorem ipsum dolor sit amet, consectetur',
      'What?',
      'Are you sure?',
      'Of course',
      'Need to think about it',
      'Amazing!!!',
    ];

    let responseInProgress = false;
    let messagebar;
    let messages;

    const sheetToggle = () => {
      messagebar.sheetToggle();
    }
    const deleteAttachment = (e, index) => {
      var image = messagebar.attachments.splice(index, 1)[0];
      messagebar.renderAttachments();
      checkAttachments();
      // Uncheck in sheet
      var imageIndex = images.indexOf(image);
      $el.value.find('.messagebar-sheet .checkbox').eq(imageIndex).find('input').prop('checked', false);
    }
    const handleAttachment = (e) => {
      var index = $(e.target).parents('label.checkbox').index();
      var image = images[index];
      if (e.target.checked) {
        // Add to attachments
        messagebar.attachments.unshift(image)
      } else {
        // Remove from attachments
        messagebar.attachments.splice(messagebar.attachments.indexOf(image), 1);
      }
      messagebar.renderAttachments();
      checkAttachments();
    }
    const checkAttachments = () => {
      if (messagebar.attachments.length > 0) {
        messagebar.attachmentsShow();
        messagebar.setPlaceholder('Add comment or Send');
      } else {
        messagebar.attachmentsHide();
        messagebar.setPlaceholder('Message');
      }
    }
    const sendMessage = () => {
      var airesponsedata=""
      var answer=""
      var text = messagebar.getValue().replace(/\n/g, '<br />').trim();
      var messagesToSend = [];
      messagebar.attachments.forEach(function (attachment) {
        var size = attachment.split('placeholder/cats-')[1].split('-')[0].split('x');
        messagesToSend.push({
          image: '<img src="' + attachment + '" style="width: ' + (size[0] / 2) + 'px; height: ' + (size[1] / 2) + 'px">'
        });
      });
      if (text.trim().length) {
        messagesToSend.push({
          text: text
        });
      }
      // Reset attachments
      messagebar.attachments = [];
      checkAttachments();
      // Hide sheet
      messagebar.sheetHide();
      // Uncheck selected images in sheet
      messagebar.$sheetEl.find('input').prop('checked', false);
      // Clear area
      messagebar.clear();
      // Focus area
      if (text.length) messagebar.focus();
      // Exit when nothing to send
      if (!messagesToSend.length) return;
      // Send message
      messages.addMessages(messagesToSend);

      // Mock response
      if (responseInProgress) return;
      responseInProgress = true;
     // setTimeout(function () {
       // var answer = answers[Math.floor(Math.random() * answers.length)];
       



        setTimeout(function () {

          var person = people[0];
          messages.showTyping({
            header: person.name + ' is typing',
            avatar: person.avatar
          });

          fetch( app.store.state.aiproxybaseurl + "/api/generate/", {
            method: 'POST',
            headers: {
              'type': 'application/json',
              'accept': 'application/json',
              'Content-Type': 'application/json',
              'origin': ''
            },
            body: JSON.stringify({text: text})
          })
          .then(res => res.json())
          .then((data) => {
              console.log(data);
              airesponsedata=data;

              //var content=promptrespopup.el.children[0].children[1].children[0];
              // console.log(propmptpopup.el.children[0].children[1].children[0].innerHTML);
              //content.innerHTML=airesponsedata.candidates[0].content.parts[0].text.replace("\\n", "</br>&nbsp;");
              //console.log(content.innerHTML);
              answer=airesponsedata.candidates[0].content.parts[0].text.replace(/\n/g, '<br />').trim();
              messages.addMessage({
                text: answer,
                type: 'received',
                name: person.name,
                avatar: person.avatar
              });
              
              messages.hideTyping();
              responseInProgress = false;
              //e.$setState({ errdata: errdata });
            //  console.log(errdata.error_Message)
          // getaiyaml();
          })




          




        }, 1000);
     // }, 1000);
    }
  

  // End chat variables 
  $on('pageInit', (e, page) => {
      //console.log('pageInit', page);
      app=page.app;
     // console.log(app.store.state);
      //appmethods=app.store.state.actions;
    //  app.store.dispatch('gdetails','test id');
   
   // console.log(props.errId)
   setTimeout(function () {
   app.preloader.show();
   fetch( app.store.state.baseurl + "/my-errors/"+props.errId, {
        method: 'GET',
        headers: {
           'type': 'application/json',
           'accept': 'application/json',
           'origin': ''
        },
      })
       .then(res => res.json())
       .then((data) => {
          //console.log(data);
          errdata=data;
          servername=errdata.server_Name;
          created_at;
          errid;
          errmessage;
          var self = page.$el[0].f7Component; 
          $update();
          app.preloader.hide();
          //e.$setState({ errdata: errdata });
          
         
       })
    }, 1000);
    //fetch error details
    getrcalist();
  });

  $onMounted(() => {
    propmptpopup = $f7.popup.create({
        el: '.prompt-popup',
        swipeToClose: true,
      });
      airesponsepopup = $f7.popup.create({
        el: '.airesponse-popup',
        swipeToClose: true,
      });
      playbookpopup = $f7.popup.create({
        el: '.playbook-popup',
        swipeToClose: true,
      });
      promptrespopup = $f7.popup.create({
        el: '.promptresponse-popup',
        swipeToClose: true,
      });
      
      aiprompteditor = $f7.textEditor.create({
        el: '#aiprompt-editor',
        buttons:[]
      });
      pbstatpopup = $f7.popup.create({
        el: '.playbookstat-popup',
        swipeToClose: true,
      });
      //chat functions 

      
      messagebar = $f7.messagebar.create({
        el: $el.value.find('.messagebar'),
        attachments: []
      });
      messagebar.el.hidden=true;
     // console.log(messagebar);
      messages = $f7.messages.create({
        el: $el.value.find('.messages'),
        firstMessageRule: function (message, previousMessage, nextMessage) {
          if (message.isTitle) return false;
          if (!previousMessage || previousMessage.type !== message.type || previousMessage.name !== message.name) return true;
          return false;
        },
        lastMessageRule: function (message, previousMessage, nextMessage) {
          if (message.isTitle) return false;
          if (!nextMessage || nextMessage.type !== message.type || nextMessage.name !== message.name) return true;
          return false;
        },
        tailMessageRule: function (message, previousMessage, nextMessage) {
          if (message.isTitle) return false;
          if (!nextMessage || nextMessage.type !== message.type || nextMessage.name !== message.name) return true;
          return false;
        }
      });
      //end chat function 
    })
    

    $onBeforeUnmount(() => {
      // Destroy popup when page removed
     
      if (propmptpopup) propmptpopup.destroy();
      if (airesponsepopup) airesponsepopup.destroy();
      if (playbookpopup) playbookpopup.destroy();
      if (promptrespopup) promptrespopup.destroy();
      if (aiprompteditor) aiprompteditor.destroy();
      
      
    })
    $on('pageBeforeRemove', () => {
      messagebar.destroy()
      messages.destroy()
    })

return $render;
};

</script>