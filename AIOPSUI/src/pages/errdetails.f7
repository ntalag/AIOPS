<template>
<div class="page" data-name="form">
  <div class="navbar">
    <div class="navbar-bg"></div>
    <div class="navbar-inner sliding">
      <div class="left">
        <a href="#" class="link back">
          <i class="icon icon-back"></i>
          <span class="if-not-md">Back</span>
        </a>
      </div>
      <div class="title">RCA Dashboard</div>
    </div>
  </div>
  <div class="page-content">

    <div class="list list-strong inset list-dividers-ios links-list">
 
      <table border="1" align="center">
      
        <tbody>
        
             <tr>
              <td class="label-cell">Date</td>
              <td class="numeric-cell">${errdata.created_at}</td>
            </tr>
    
            <tr>
              <td class="label-cell">Server Name</td>
              <td class="numeric-cell">${errdata.server_Name}</td>
            </tr>
            <tr>
              <td class="label-cell">Error Message</td>
              <td class="numeric-cell">${errdata.error_Message}</td>
            </tr>
          
        
    
          
         
        </tbody>
      </table>
    </div>
    <div class="block-title">Prompt to AI Assistant</div>
    <div class="list list-strong-ios list-dividers-ios list-outline-ios">

      <ul>
<!--
        <li>
          <div class="item-content item-input">
            <div class="item-inner">
              <div class="item-title item-label">Name</div>
              <div class="item-input-wrap">
                <input type="text" placeholder="Your name" />
              </div>
            </div>
          </div>
        </li>
        <li>
          <div class="item-content item-input">
            <div class="item-inner">
              <div class="item-title item-label">E-mail</div>
              <div class="item-input-wrap">
                <input type="email" placeholder="E-mail" />
              </div>
            </div>
          </div>
        </li>
        <li>
          <div class="item-content item-input">
            <div class="item-inner">
              <div class="item-title item-label">URL</div>
              <div class="item-input-wrap">
                <input type="url" placeholder="URL" />
              </div>
            </div>
          </div>
        </li>
        <li>
          <div class="item-content item-input">
            <div class="item-inner">
              <div class="item-title item-label">Password</div>
              <div class="item-input-wrap">
                <input type="password" placeholder="Password" />
              </div>
            </div>
          </div>
        </li>
        <li>
          <div class="item-content item-input">
            <div class="item-inner">
              <div class="item-title item-label">Phone</div>
              <div class="item-input-wrap">
                <input type="tel" placeholder="Phone" />
              </div>
            </div>
          </div>
        </li>
        <li>
          <div class="item-content item-input">
            <div class="item-inner">
              <div class="item-title item-label">Gender</div>
              <div class="item-input-wrap">
                <select>
                  <option>Male</option>
                  <option>Female</option>
                </select>
              </div>
            </div>
          </div>
        </li>
        <li>
          <div class="item-content item-input">
            <div class="item-inner">
              <div class="item-title item-label">Birth date</div>
              <div class="item-input-wrap">
                <input type="date" placeholder="Birth day" value="2014-04-30" />
              </div>
            </div>
          </div>
        </li>
        <li>
          <div class="item-content">
            <div class="item-inner">
              <div class="item-title">Toggle</div>
              <div class="item-after">
                <label class="toggle toggle-init">
                  <input type="checkbox" />
                  <span class="toggle-icon"></span>
                </label>
              </div>
            </div>
          </div>
        </li>
        <li>
          <div class="item-content item-input">
            <div class="item-inner">
              <div class="item-title item-label">Slider</div>
              <div class="item-input-wrap">
                <div class="range-slider range-slider-init" data-label="true">
                  <input type="range" value="50" min="0" max="100" step="1" />
                </div>
              </div>
            </div>
          </div>
        </li>
      --> 
        <li class="align-top">
          <div class="item-content item-input">
            <div class="item-inner">
              <!-- <div class="item-title item-label"></div>
              <div class="item-input-wrap">
                
                <textarea class="aiprompt-editor" id="aiprompt-editor" placeholder=""></textarea> 
              </div> -->
              <div class="text-editor " id="aiprompt-editor" data-placeholder="Enter text..."
              data-mode="popover">
                <div class="text-editor-content" contenteditable>${errdata.error_Message} please create an ansible playbook check status and start the serives to fix this issue. please provide yaml output only</div>
              </div>
            </div>
          </div>
        </li>
        <!-- 
        <li class="align-top">
          <div class="item-content item-input">
            <div class="item-inner">
              <div class="item-title item-label">Resizable</div>
              <div class="item-input-wrap">
                <textarea placeholder="Bio" class="resizable"></textarea>
              </div>
            </div>
          </div>
        </li>
        -->
      </ul>
    </div>
    <div class="block-title">Send to AI Assistant</div>
    <div class="block block-strong-ios block-outline-ios grid grid-cols-2 grid-gap">
      <!-- <a href="#" class="button">Button</a> -->
      <a  href="" class="button button-fill" @click=${() => sendtoai()} >Send</a>
      <!-- 
      <a href="#" class="button button-raised">Raised</a>
      <a href="#" class="button button-raised button-fill">Raised Fill</a>
      <a href="#" class="button button-round">Round</a>
      <a href="#" class="button button-round button-fill">Round Fill</a>
      <a href="#" class="button button-outline">Outline</a>
      <a href="#" class="button button-round button-outline">Outline Round</a>
      <a href="#" class="button button-small button-outline">Small</a>
      <a href="#" class="button button-small button-round button-outline">Small Round</a>
      <a href="#" class="button button-small button-fill">Small</a>
      <a href="#" class="button button-small button-round button-fill">Small Round</a>
      <a href="#" class="button button-large button-raised">Large</a>
      <a href="#" class="button button-large button-fill button-raised">Large Fill</a>
      <a href="#" class="button button-large button-fill button-raised color-red">Large Red</a>
      <a href="#" class="button button-large button-fill button-raised color-green">Large Green</a>
      -->  
    </div>
    <!-- 
    <div class="block-title">Checkbox group</div>
    <div class="list list-strong-ios list-outline-ios list-dividers-ios">
      <ul>
        <li>
          <label class="item-checkbox item-content">
            <input type="checkbox" name="checkbox" value="Books" checked="checked" />
            <i class="icon icon-checkbox"></i>
            <div class="item-inner">
              <div class="item-title">Books</div>
            </div>
          </label>
        </li>
        <li>
          <label class="item-checkbox item-content">
            <input type="checkbox" name="checkbox" value="Movies" />
            <i class="icon icon-checkbox"></i>
            <div class="item-inner">
              <div class="item-title">Movies</div>
            </div>
          </label>
        </li>
        <li>
          <label class="item-checkbox item-content">
            <input type="checkbox" name="checkbox" value="Food" />
            <i class="icon icon-checkbox"></i>
            <div class="item-inner">
              <div class="item-title">Food</div>
            </div>
          </label>
        </li>
        <li>
          <label class="item-checkbox item-content">
            <input type="checkbox" name="checkbox" value="Drinks" />
            <i class="icon icon-checkbox"></i>
            <div class="item-inner">
              <div class="item-title">Drinks</div>
            </div>
          </label>
        </li>
      </ul>
    </div>

  
    <div class="block-title">Radio buttons group</div>
    <div class="list list-strong-ios list-outline-ios list-dividers-ios">
      <ul>
        <li>
          <label class="item-radio item-content">
            <input type="radio" name="radio" value="Books" checked="checked" />
            <i class="icon icon-radio"></i>
            <div class="item-inner">
              <div class="item-title">Books</div>
            </div>
          </label>
        </li>
        <li>
          <label class="item-radio item-content">
            <input type="radio" name="radio" value="Movies" />
            <i class="icon icon-radio"></i>
            <div class="item-inner">
              <div class="item-title">Movies</div>
            </div>
          </label>
        </li>
        <li>
          <label class="item-radio item-content">
            <input type="radio" name="radio" value="Food" />
            <i class="icon icon-radio"></i>
            <div class="item-inner">
              <div class="item-title">Food</div>
            </div>
          </label>
        </li>
        <li>
          <label class="item-radio item-content">
            <input type="radio" name="radio" value="Drinks" />
            <i class="icon icon-radio"></i>
            <div class="item-inner">
              <div class="item-title">Drinks</div>
            </div>
          </label>
        </li>
      </ul>
    </div>
-->
<div class="block-title">AI RCA Dashboard</div>
<div class="list list-strong inset list-dividers-ios links-list">
 
  <table border="1" align="center">
    <thead>
      <tr>
        <th class="label-cell">Prompt Date</th>
        <th class="numeric-cell">Prompt</th>
        <th class="numeric-cell">Resolution</th>
        <th class="numeric-cell">Details</th>
        <th class="numeric-cell">Request for Approval</th>
   
      </tr>
    </thead>
    <tbody>
   
    
     

       ${rcasdata.map((rca) => $h`

         <tr>
          <td class="label-cell">${rca.created_at}</td>
          <td class="numeric-cell"><a  href="" @click=${() => openprompt(rca)} >...</a></td>
          <td class="numeric-cell"><a  href="" @click=${() => openanalysis(rca)} >Analysis</a></td>
          <td class="numeric-cell"><a  href="" @click=${() => openyaml(rca)} >Ansible Playbook</a></td>
          <td class="numeric-cell"><a  href="" @click=${() => approve(rca)}>Send</a></td>
        
        </tr>

       `)}

      
     
    </tbody>
  </table>
</div>
     <!-- Prompt Details-->
     <div class="popup prompt-popup" data-close-on-escape="true" data-swipe-to-close="to-bottom"> 
      <div class="page">
        <div class="navbar">
          <div class="navbar-bg"></div>
          <div class="navbar-inner">
            <div class="title">AI Prompt</div>
            <div class="right"><a class="link popup-close">Close</a></div>
          </div>
        </div>
        <div class="page-content">
          <div class="block">
               test content
          </div>
        </div>
      </div>
    </div>
    <!-- AI Response Details-->
    <div class="popup airesponse-popup" data-close-on-escape="true" data-swipe-to-close="to-bottom"> 
      <div class="page">
        <div class="navbar">
          <div class="navbar-bg"></div>
          <div class="navbar-inner">
            <div class="title">AI Response</div>
            <div class="right"><a class="link popup-close">Close</a></div>
          </div>
        </div>
        <div class="page-content">
          <div class="block">
               test content
          </div>
        </div>
      </div>
    </div>
     <!-- Playbook Details-->
    <div class="popup playbook-popup" data-close-on-escape="true" data-swipe-to-close="to-bottom"> 
      <div class="page">
        <div class="navbar">
          <div class="navbar-bg"></div>
          <div class="navbar-inner">
            <div class="title">AI Prompt</div>
            <div class="right"><a class="link popup-close">Close</a></div>
          </div>
        </div>
        <div class="page-content">
          <textarea cols="100" rows="20" style="overflow-y:scroll;">
            test content
          </textarea>
        </div>
      </div>
    </div>
    <div class="popup promptresponse-popup" data-close-on-escape="true" data-swipe-to-close="to-bottom"> 
      <div class="page">
        <div class="navbar">
          <div class="navbar-bg"></div>
          <div class="navbar-inner">
            <div class="title">AI Response</div>
            <div class="right"><a class="link popup-close">Close</a></div>
          </div>
        </div>
        <div class="page-content">
          <textarea cols="100" rows="20" style="overflow-y:scroll;">
               test content
          </textarea>
          <div class="block">
             <a  href="" class="button button-fill" @click=${() => saveresponses()} >Save</a>
        </div>
        </div>
      </div>
    </div>
  </div>
</div>
</template>
<script>
var tapp;
export default (props,  { $f7,  $on, $onMounted, $onBeforeUnmount, $update}) => {
 var app;
 var $$ ;
 let aiprompteditor;
 let propmptpopup;
 let airesponsepopup;
 let promptrespopup;
 let playbookpopup;
 let errdata={
     server_Name: '',
     error_Message: '',
     created_at: '',
     id: ''
 };
 let rcasdata=[{
     errorid: '',
     prompt: '',
     ai_response: '',
     ansible_playbook: '',
     created_at: '',
     id: ''
 }];
 let airesponsedata=[];
 let airesyamldata=[];
 let airesponsetext="";
 let airesyamltext="";
 let servername;
 let created_at;
 let errid;
 let errmessage;
 // Component Methods
 const openprompt = (rca) => {
      var content=propmptpopup.el.children[0].children[1].children[0];
      // console.log(propmptpopup.el.children[0].children[1].children[0].innerHTML);
      content.innerHTML=rca.prompt
      propmptpopup.open();
      // $f7.dialog.alert(JSON.stringify( rca.prompt));
      
    }
 const openanalysis = (rca) => {
      // console.log(rca);
      var content=airesponsepopup.el.children[0].children[1].children[0];
      // console.log(propmptpopup.el.children[0].children[1].children[0].innerHTML);
      content.innerHTML=rca.ai_response
      airesponsepopup.open();
      // $f7.dialog.alert(JSON.stringify( rca.ai_response));
      
    }
 const openyaml = (rca) => {
      // console.log(rca);
      
      var content=playbookpopup.el.children[0].children[1].children[0];
      // console.log(propmptpopup.el.children[0].children[1].children[0].innerHTML);
      content.innerHTML=rca.ansible_playbook
      playbookpopup.open();
      // $f7.dialog.alert(JSON.stringify( rca.ansible_playbook));
      
    }
 const saveresponses = () => {
    //  console.log("Error id: " + errdata.id + "\n" +
    //              "prompt: " + aiprompteditor.value + "\n" +
    //              "airesponse: " + airesponsetext + "\n" +
    //              "ansibleplaybook: " + airesyamltext + "\n" 


    //  );
    var today = new Date();
var dd = String(today.getDate()).padStart(2, '0');
var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
var yyyy = today.getFullYear();

today =  yyyy + '-' + mm +  '-' + dd ;
     var errrcajson={
          errorid: errdata.id,
          prompt: aiprompteditor.value,
          ai_response: airesponsetext,
          ansible_playbook: airesyamltext,
          created_at: today
     };
    console.log(JSON.stringify(errrcajson));

 //save to database 
 setTimeout(function () {
   app.preloader.show();
   fetch( app.store.state.baseurl + "/rcas", {
        method: 'POST',
        headers: {
           'type': 'application/json',
           'accept': 'application/json',
          'Content-Type': 'application/json',
           'origin': ''
        },
        body: JSON.stringify(errrcajson)
      })
       .then(res => {
          if (res.ok) {
            return res.json();
          }
          throw new Error(res.status);
         // app.preloader.hide();
        })
       .then((data) => {
          console.log(data);
          // airesponsedata=data;

          // var content=promptrespopup.el.children[0].children[1].children[0];
          // // console.log(propmptpopup.el.children[0].children[1].children[0].innerHTML);
          // content.innerHTML=airesponsedata.candidates[0].content.parts[0].text.replace("\\n", "</br>&nbsp;");
          // console.log(content.innerHTML);
          // airesponsetext=content.innerHTML;
          // promptrespopup.open()
          // app.preloader.hide();

          //e.$setState({ errdata: errdata });
        //  console.log(errdata.error_Message)
        //getaiyaml();
        getrcalist();
       })
       .catch((error) => {
          console.log(error)
          if (error=='Error: 500') {
              //alert('Record has been saved to database')
              app.dialog.alert("Status: 1 </br>" + 
                           "Message: Record has been saved to database" 
              );
              getrcalist();
          } else {
            alert(error)
          }
          app.preloader.hide();
        });
    }, 1000);






 };
 const sendtoai = () => {
  airesponsetext="";
      // console.log(aiprompteditor.value)

      var prompt = aiprompteditor.value;
     
    //call ai proxy 
  setTimeout(function () {
   app.preloader.show();
   fetch( app.store.state.aiproxybaseurl + "/api/generate/", {
        method: 'POST',
        headers: {
           'type': 'application/json',
           'accept': 'application/json',
          'Content-Type': 'application/json',
           'origin': ''
        },
        body: JSON.stringify({text: prompt})
      })
       .then(res => res.json())
       .then((data) => {
          console.log(data);
          airesponsedata=data;

          var content=promptrespopup.el.children[0].children[1].children[0];
          // console.log(propmptpopup.el.children[0].children[1].children[0].innerHTML);
          content.innerHTML=airesponsedata.candidates[0].content.parts[0].text.replace("\\n", "</br>&nbsp;");
          console.log(content.innerHTML);
         airesponsetext=""  ;//ontent.innerHTML;
          airesyamltext=content.innerHTML; //save ansible as well
          promptrespopup.open()
          app.preloader.hide();

          //e.$setState({ errdata: errdata });
        //  console.log(errdata.error_Message)
       // getaiyaml();
       })
    }, 1000);
    
    }

 const approve = (rca) => {
    //console.log(rca.id);
    var rcaid=rca.id;
    // var content=playbookpopup.el.children[0].children[1].children[0];
    // // console.log(propmptpopup.el.children[0].children[1].children[0].innerHTML);
    // content.innerHTML=rca.ansible_playbook
    // playbookpopup.open();
    // $f7.dialog.alert(JSON.stringify( rca.ansible_playbook));
    setTimeout(function () {
   app.preloader.show();
   fetch( app.store.state.aiproxybaseurl + "/api/approve/", {
        method: 'POST',
        headers: {
           'type': 'application/json',
           'accept': 'application/json',
          'Content-Type': 'application/json',
           'origin': ''
        },
        body: JSON.stringify({rcaid: rcaid})
      })
       .then(res => res.json())
       .then((data) => {
          //console.log(data);
          //{sendstatus: '1', sendmessage: 'ansible script sent to ansible server for record : [503]'}
          app.dialog.alert("Status: " + data.sendstatus + "</br>" + 
                           "Message: " + data.sendmessage
          );
          app.preloader.hide();
          //e.$setState({ errdata: errdata });
        //  console.log(errdata.error_Message)
       // getaiyaml();
       })
    }, 1000);
    
 }
 

 const getaiyaml = () => {

      //call ai playbook proxy   
      airesyamltext=""; 
  setTimeout(function () {
   app.preloader.show(); 
   var yamlprompt = " please create an ansible playbook to fix this issue. please provide yaml only";
   prompt = errdata.error_Message + yamlprompt;
   fetch( app.store.state.aiproxybaseurl + "/api/generate/", {
        method: 'POST',
        headers: {
           'type': 'application/json',
           'accept': 'application/json',
          'Content-Type': 'application/json',
           'origin': ''
        },
        body: JSON.stringify({text: prompt})
      })
       .then(res => res.json())
       .then((data) => {
          console.log(data);
          airesyamldata=data;

          var content=promptrespopup.el.children[0].children[1].children[0];
          // console.log(propmptpopup.el.children[0].children[1].children[0].innerHTML);
          content.innerHTML=content.innerHTML + "</br></br></br>Ansible Playbook</br></br>"+ airesyamldata.candidates[0].content.parts[0].text.replace("\\n", "</br>&nbsp;");
         //console.log(content.innerHTML);
         airesyamltext=content.innerHTML;
         promptrespopup.open()
          app.preloader.hide();
          //e.$setState({ errdata: errdata });
          
          //var content=propmptpopup.el.children[0].children[1].children[0];
  
     
         //  promptrespopup.open();
       })
    }, 1000);
    
    }
      
 const getrcalist = () => {
  setTimeout(function () {
   app.preloader.show();
   fetch( app.store.state.baseurl + "/rcas/search/"+props.errId, {
        method: 'GET',
        headers: {
           'type': 'application/json',
           'accept': 'application/json',
           'origin': ''
        },
      })
       .then(res => res.json())
       .then((data) => {
         // console.log(data);
          rcasdata=data;
         
          $update();
          app.preloader.hide();
          //e.$setState({ errdata: errdata });
          
         
       })
    }, 1000);

 }  
    
      
  
  $on('pageInit', (e, page) => {
      //console.log('pageInit', page);
      app=page.app;
     // console.log(app.store.state);
      //appmethods=app.store.state.actions;
    //  app.store.dispatch('gdetails','test id');
   
   // console.log(props.errId)
   setTimeout(function () {
   app.preloader.show();
   fetch( app.store.state.baseurl + "/my-errors/"+props.errId, {
        method: 'GET',
        headers: {
           'type': 'application/json',
           'accept': 'application/json',
           'origin': ''
        },
      })
       .then(res => res.json())
       .then((data) => {
          //console.log(data);
          errdata=data;
          servername=errdata.server_Name;
          created_at;
          errid;
          errmessage;
          var self = page.$el[0].f7Component; 
          $update();
          app.preloader.hide();
          //e.$setState({ errdata: errdata });
          
         
       })
    }, 1000);
    //fetch error details
    getrcalist();
  });

  $onMounted(() => {
    propmptpopup = $f7.popup.create({
        el: '.prompt-popup',
        swipeToClose: true,
      });
      airesponsepopup = $f7.popup.create({
        el: '.airesponse-popup',
        swipeToClose: true,
      });
      playbookpopup = $f7.popup.create({
        el: '.playbook-popup',
        swipeToClose: true,
      });
      promptrespopup = $f7.popup.create({
        el: '.promptresponse-popup',
        swipeToClose: true,
      });
      
      aiprompteditor = $f7.textEditor.create({
        el: '#aiprompt-editor',
        buttons:[]
      });
      
    })
    

    $onBeforeUnmount(() => {
      // Destroy popup when page removed
     
      if (propmptpopup) propmptpopup.destroy();
      if (airesponsepopup) airesponsepopup.destroy();
      if (playbookpopup) playbookpopup.destroy();
      if (promptrespopup) promptrespopup.destroy();
      if (aiprompteditor) aiprompteditor.destroy();
      
      
    })

return $render;
};

</script>